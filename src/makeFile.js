
class Makefile {
    constructor() {
        this.directives = [];
        this.variables = [];
        this.rules = [];

        this.addRule = this.addRule.bind(this);
        this.addVariable = this.addVariable.bind(this);
    }

    addDirectives(text) {
        this.directives.push(text);
    }

    addRule(rule) {
        if (rule instanceof Rule) {
            this.rules.push(rule);
        } else {
            console.warn("Invalid Rule")
        }
    }

    addVariable(variable) {
        if (variable instanceof Variable) {
            this.variables.push(variable);
        } else {
            console.warn("Invalid Variable");
        }
    }

    toString() {
        var result = '';
        result += "# Makefile Generated by JS script. No warranty included\n";
        for( var directive of this.directives) { 
            result += directive + "\n";
        }
        result+="\n\n";
        for (var variable of this.variables) {
            result += variable.getDefinition() + "\n"
        }
        result += "\n\n #Defining Rules\n\n"
        for (var rule of this.rules) {
            result += rule.toString() + "\n";
        }
        return result;
    }


}
/* A makefile is made up of 5 things: (https://www.gnu.org/software/make/manual/make.html#Makefile-Contents) 

    Explicit Rules,
    Implicit Rules, 
    Variable Definitions,
    directives( include, conditionals,
    Comments

    Some of these will be mapped to classes. 
    Rules, Variables, 

*/

//Has a target, prerequsities and a recipe 
//Target is a string
//Prereqs is an array of strings or variables
//Recipe is an array of strings\variables 
class Rule {
    constructor(target) {
        this.target = target || '';
        this.prereqs = [];
        this.recipe = [];

        this.addPrerequisite = this.addPrerequisite.bind(this);
        this.addRecipeStep = this.addRecipeStep.bind(this);
        this.toString = this.toString.bind(this);
    }

    addPrerequisite(requisite) {
        if (requisite instanceof Variable) {
            //Convert to reference
            this.prereqs.push(requisite.referenceStr)
        } else {
            this.prereqs.push(requisite);
        }
    }

    addRecipeStep(step) {
        this.recipe.push(step);
    }

    toString() {
        var preReqsString = '';
        var recipeString = '\t';
        for (var i = 0; i < this.prereqs.length; i++) {
            preReqsString += this.prereqs[i] + ' ';
        }
        for (var i = 0; i < this.recipe.length; i++) {
            recipeString += this.recipe[i] + '\n\t';
        }

        return `${this.target}: ${preReqsString} \n${recipeString}`
    }
}


//Made up of a name, and a value.
class Variable {
    constructor(name, value) {
        this.name = name;
        this._value = value || '';
    }

    get referenceStr() {
        return "$(" + this.name + ")";
    }

    get nameString() {
        return this.name
    }

    get valueString() {
        if (this.value instanceof Variable) {
            //It needs to be in brackets if the value is a variable. 
            return "$(" + this.value.name + ")";
        } else {
            return this.value;
        }
    }

    set value(value) {
        this._value = value;
    }
    get value() { return this._value; }

    /** Returns the string that defines the variable in makefile way */
    getDefinition() {
        return this.nameString + " := " + this.valueString
    }

}

module.exports = { Makefile, Variable, Rule };